<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
     http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<context:annotation-config />
	<!--自动扫描service业务层接口-->
	<context:component-scan base-package="com.lynn.service" />
	<!--读取配置文件，对应数据库配置，可以省略直接在applicationContext.xml中配置，或外部引入-->
<!--	<context:property-placeholder location="classpath:log4j.properties"/>-->

	<!--添加数据库的相关配置，配置数据源，对应的druid连接池-->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	  <property name="driverClassName">
	      <value>com.mysql.cj.jdbc.Driver</value>
	  </property>
	  <property name="url"
				value="jdbc:mysql://localhost:3306/assistant?characterEncoding=UTF-8&amp;useSSL=false&amp;
				serverTimezone=UTC&amp;serverTimezone=GMT%2B8&amp;allowPublicKeyRetrieval=true"/>
	  <property name="username">
	      <value>root</value>
	  </property>  
	  <property name="password">
	      <value>root</value>
	  </property>
	</bean>

	<!--通过SqlSessionFactoryBean来创建工厂bean，以此操作数据库实体类对象-->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!-- 注册多个mapper文件
       	classpath:类路径，生成的类信息放在src文件同级目录下的lib的文件夹中，所以相当于src文件夹的位置开始后的路径
      	-->
		<property name="mapperLocations" value="classpath:com/lynn/mapper/*.xml"/>
		<!-- 为mapper文件中的实体定义缺省包路径 -->
		<property name="typeAliasesPackage" value="com.lynn.pojo" />
		<property name="plugins">
		    <array>
		      <bean class="com.github.pagehelper.PageInterceptor">
		        <property name="properties">
		          <!--使用下面的方式配置参数，一行配置一个 -->
		          <value>
		          </value>
		        </property>
		      </bean>
		    </array>
		  </property>		
	</bean>

	<!--生产dao的实现类的对象，并纳入工厂管理
    行为：
     1.扫描指定包名下所有的dao接口
     2.根据提供的daoMapper文件信息和Sqlsession，构建dao的实现类
     3.将对象纳入工厂处理，且id默认为：首字母小写的接口类名
    -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.lynn.dao"/>
	</bean>

	<!-- 扫描 aop 包 -->
	<context:component-scan base-package="com.lynn.aop" />
	<!-- 打开注解扫描 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

</beans>